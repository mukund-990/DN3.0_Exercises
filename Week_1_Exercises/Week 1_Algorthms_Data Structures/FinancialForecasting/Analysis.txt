Time Complexity of Recursive Algorithm:

The time complexity of the recursive algorithm in FinancialForecasting is O(2^n), where n is the number of years. 
This is because each recursive call branches into two new calls, resulting in an exponential number of calls.

Optimization using Memoization:

To optimize the recursive solution, we can use memoization to avoid excessive computation. Memoization is a technique 
that stores the results of expensive function calls and returns the cached result when the same inputs occur again.

In MemoizedFinancialForecasting, we use a HashMap to store the results of previous calculations. Before calculating the 
future value, we check if the result is already cached in the map. If it is, we return the cached result. If not, 
we calculate the result, store it in the map, and return it.

By using memoization, we reduce the time complexity of the algorithm to O(n), where n is the number of years. 
This is because we only calculate each future value once and store it in the cache, avoiding redundant calculations.


Step-by-step explanation of how memoization works in MemoizedFinancialForecasting:

The calculateFutureValue method is called with years = 5.
The method checks if the result is already cached in the map for years = 5. If not, it proceeds to calculate the result.
The method calculates the future value for years = 4 and stores it in the map.
The method calculates the future value for years = 3 and stores it in the map.
...
The method calculates the future value for years = 0 and stores it in the map.
The method returns the cached result for years = 5.
By storing the results of previous calculations, we avoid recalculating the same values multiple times, 
reducing the time complexity of the algorithm.

Benefits of Memoization

Reduced computation time: By avoiding redundant calculations, we reduce the overall computation time.
Improved performance: Memoization can significantly improve the performance of recursive algorithms.
Simplified code: Memoization can simplify the code by eliminating the need for complex recursive logic.

However, memoization also has some limitations, such as:

Increased memory usage: Memoization requires storing the results of previous calculations, which can increase memory usage.
Cache management: Memoization requires managing the cache, which can be complex in certain scenarios.